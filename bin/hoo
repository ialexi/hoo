#!/usr/bin/env seed

/*
  Doctor Hoo?
  A documentation generator that recursively searches an input directory for files
  ending with .md, and writes them out in an output directory. Also, copies an optional
  resource directory into the output directory.
  
  who.js input output
  who.js --resources resources input output
*/
var optparse = require('optparse'), who = require("hoo"); 
var sys = require("sys"), fs = require("core-support:fs");

var switches = [
	['-h', '--help', 'Shows help (this message).'],
	['-r PATH', '--resources PATH', 'Sets the resource directory. Default: resources (will ignore if not found)'],
	['-t PATH', '--template PATH', 'Sets the template. Defaults to docs/template.haml'],
	['-i PATH', '--input PATH', 'Sets the input directory. Defaults to docs.'],
	['-o PATH', '--output PATH', 'Sets the output directory. Defaults to docs-build. OUTPUT DIRECTORY WILL BE OVERWRITTEN!'],
	['-p NAME', '--package-name NAME', 'Sets the package name. Defaults to anon or the current package.']
];

// prepare parser
var parser = new optparse.OptionParser(switches);
parser.banner = 'Usage: hoo [input-folder] [output-folder]'

// prepare settings
var settings = {
  input: "docs",
  output: "docs-build", // remember, we are destructive, so we want to ABSOLUTELY NOT OVERLAP
  resources: "resources",
  template: 'docs/template.haml',
  packageName: "anon",
  progress: function(stats) {
    if (stats.err) throw stats.err;
    var total = stats.total, processed = stats.processed;
    sys.print("Processed: " + processed + " of " + total + "; " + (Math.round((processed / total) * 10000) / 100) + "%     \r");
  }
};

// attempt to find package name
try {
  var cwd = process.cwd();
  var pkg = require.loader.openNearestPackage(cwd);
  if (pkg) settings.packageName = pkg.get("name");
} catch (e) {}

// parser
parser.on('help', function() {
	sys.puts(parser.toString());
});

parser.on('resources', function(o, v) {
  settings.resources = v;
});

parser.on('template', function(o, v) {
  settings.template = v;
});

parser.on('input', function(o, v) {
  settings.input = v;
});

parser.on('output', function(o, v) {
  settings.output = v;
});

parser.on('package-name', function(o, v){
  settings.packageName = v;
});

parser.parse(process.ARGV);

// check
if (!settings.input || !settings.output || !fs.exists(settings.input) || !fs.exists(settings.template)) {
  if (!settings.input) sys.puts("No input directory specified.");
  else if (!settings.output) sys.puts("No output directory specified.");
  else if (!fs.exists(settings.input)) sys.puts("Input directory '" + settings.input + "' not found.");
  else if (!fs.exists(settings.template)) sys.puts("Template '" + settings.template + "' not found.");
  sys.puts(parser.toString());
  return;
}

who.doctor(settings, function(stats){
  sys.print("\n\nFinished in " + (stats.time / 1000) + " seconds.\n");
});