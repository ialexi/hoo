#!/usr/bin/env seed-node
/*
  Doctor Hoo?
  A documentation generator that recursively searches an input directory for files
  ending with .md, and writes them out in an output directory. Also, copies an optional
  resource directory into the output directory.
  
  who.js input output
  who.js --resources resources input output
*/

var optparse = require('optparse'), who = require("hoo"), sys = require("sys"), fs = require("core_support:fs");

var switches = [
	['-h', '--help', 'Shows help (this message).'],
	['-r', '--resources PATH', 'Sets the resource directory. Default: resources (will ignore if not found)'],
	['-t PATH', '--template PATH', 'Sets the template. Defaults to template.haml']
];

// prepare parser
var parser = new optparse.OptionParser(switches);
parser.banner = 'Usage: hoo [input-folder] [output-folder]'

// prepare settings
var settings = {
  input: null,
  output: null,
  resources: "resources",
  template: 'template.haml',
  progress: function(stats) {
    if (stats.err) throw stats.err;
    var total = stats.total, processed = stats.processed;
    sys.print("Processed: " + processed + " of " + total + "; " + (Math.round((processed / total) * 10000) / 100) + "%     \r");
  }
};

// parser
parser.on('help', function() {
	sys.puts(parser.toString());
});

parser.on('resources', function(o, v) {
  settings.resources = v;
});

parser.on('template', function(o, v) {
  settings.template = v;
});

parser.on(3, function(v) {
  settings.input = v;
});

parser.on(4, function(v) {
  settings.output = v;
});

parser.parse(process.ARGV);

// check
if (!settings.input || !settings.output || !fs.exists(settings.input) || !fs.exists(settings.template)) {
  if (!settings.input) sys.puts("No input directory specified.");
  else if (!settings.output) sys.puts("No output directory specified.");
  else if (!fs.exists(settings.input)) sys.puts("Input directory '" + settings.input + "' not found.");
  else if (!fs.exists(settings.template)) sys.puts("Template '" + settings.template + "' not found.");
  sys.puts(parser.toString());
  return;
}

who.doctor(settings, function(stats){
  sys.print("\n\nFinished in " + (stats.time / 1000) + " seconds.\n");
});